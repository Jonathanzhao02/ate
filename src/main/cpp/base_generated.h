// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASE_COM_TOKERA_ATE_DAO_MSG_H_
#define FLATBUFFERS_GENERATED_BASE_COM_TOKERA_ATE_DAO_MSG_H_

#include "flatbuffers/flatbuffers.h"

#include "common_generated.h"
#include "castle_generated.h"
#include "data_generated.h"
#include "key_generated.h"

namespace com {
namespace tokera {
namespace ate {
namespace dao {
namespace msg {

struct MessageBase;

enum MessageType {
  MessageType_NONE = 0,
  MessageType_MessageData = 1,
  MessageType_MessageSecurityCastle = 2,
  MessageType_MessagePublicKey = 3,
  MessageType_MessageSync = 4,
  MessageType_MIN = MessageType_NONE,
  MessageType_MAX = MessageType_MessageSync
};

inline const MessageType (&EnumValuesMessageType())[5] {
  static const MessageType values[] = {
    MessageType_NONE,
    MessageType_MessageData,
    MessageType_MessageSecurityCastle,
    MessageType_MessagePublicKey,
    MessageType_MessageSync
  };
  return values;
}

inline const char * const *EnumNamesMessageType() {
  static const char * const names[] = {
    "NONE",
    "MessageData",
    "MessageSecurityCastle",
    "MessagePublicKey",
    "MessageSync",
    nullptr
  };
  return names;
}

inline const char *EnumNameMessageType(MessageType e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesMessageType()[index];
}

template<typename T> struct MessageTypeTraits {
  static const MessageType enum_value = MessageType_NONE;
};

template<> struct MessageTypeTraits<MessageData> {
  static const MessageType enum_value = MessageType_MessageData;
};

template<> struct MessageTypeTraits<MessageSecurityCastle> {
  static const MessageType enum_value = MessageType_MessageSecurityCastle;
};

template<> struct MessageTypeTraits<MessagePublicKey> {
  static const MessageType enum_value = MessageType_MessagePublicKey;
};

template<> struct MessageTypeTraits<MessageSync> {
  static const MessageType enum_value = MessageType_MessageSync;
};

bool VerifyMessageType(flatbuffers::Verifier &verifier, const void *obj, MessageType type);
bool VerifyMessageTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct MessageBase FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MSG_TYPE = 4,
    VT_MSG = 6
  };
  MessageType msg_type() const {
    return static_cast<MessageType>(GetField<uint8_t>(VT_MSG_TYPE, 0));
  }
  const void *msg() const {
    return GetPointer<const void *>(VT_MSG);
  }
  template<typename T> const T *msg_as() const;
  const MessageData *msg_as_MessageData() const {
    return msg_type() == MessageType_MessageData ? static_cast<const MessageData *>(msg()) : nullptr;
  }
  const MessageSecurityCastle *msg_as_MessageSecurityCastle() const {
    return msg_type() == MessageType_MessageSecurityCastle ? static_cast<const MessageSecurityCastle *>(msg()) : nullptr;
  }
  const MessagePublicKey *msg_as_MessagePublicKey() const {
    return msg_type() == MessageType_MessagePublicKey ? static_cast<const MessagePublicKey *>(msg()) : nullptr;
  }
  const MessageSync *msg_as_MessageSync() const {
    return msg_type() == MessageType_MessageSync ? static_cast<const MessageSync *>(msg()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_MSG_TYPE) &&
           VerifyOffset(verifier, VT_MSG) &&
           VerifyMessageType(verifier, msg(), msg_type()) &&
           verifier.EndTable();
  }
};

template<> inline const MessageData *MessageBase::msg_as<MessageData>() const {
  return msg_as_MessageData();
}

template<> inline const MessageSecurityCastle *MessageBase::msg_as<MessageSecurityCastle>() const {
  return msg_as_MessageSecurityCastle();
}

template<> inline const MessagePublicKey *MessageBase::msg_as<MessagePublicKey>() const {
  return msg_as_MessagePublicKey();
}

template<> inline const MessageSync *MessageBase::msg_as<MessageSync>() const {
  return msg_as_MessageSync();
}

struct MessageBaseBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_msg_type(MessageType msg_type) {
    fbb_.AddElement<uint8_t>(MessageBase::VT_MSG_TYPE, static_cast<uint8_t>(msg_type), 0);
  }
  void add_msg(flatbuffers::Offset<void> msg) {
    fbb_.AddOffset(MessageBase::VT_MSG, msg);
  }
  explicit MessageBaseBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageBaseBuilder &operator=(const MessageBaseBuilder &);
  flatbuffers::Offset<MessageBase> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageBase>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageBase> CreateMessageBase(
    flatbuffers::FlatBufferBuilder &_fbb,
    MessageType msg_type = MessageType_NONE,
    flatbuffers::Offset<void> msg = 0) {
  MessageBaseBuilder builder_(_fbb);
  builder_.add_msg(msg);
  builder_.add_msg_type(msg_type);
  return builder_.Finish();
}

inline bool VerifyMessageType(flatbuffers::Verifier &verifier, const void *obj, MessageType type) {
  switch (type) {
    case MessageType_NONE: {
      return true;
    }
    case MessageType_MessageData: {
      auto ptr = reinterpret_cast<const MessageData *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_MessageSecurityCastle: {
      auto ptr = reinterpret_cast<const MessageSecurityCastle *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_MessagePublicKey: {
      auto ptr = reinterpret_cast<const MessagePublicKey *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case MessageType_MessageSync: {
      auto ptr = reinterpret_cast<const MessageSync *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyMessageTypeVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMessageType(
        verifier,  values->Get(i), types->GetEnum<MessageType>(i))) {
      return false;
    }
  }
  return true;
}

inline const com::tokera::ate::dao::msg::MessageBase *GetMessageBase(const void *buf) {
  return flatbuffers::GetRoot<com::tokera::ate::dao::msg::MessageBase>(buf);
}

inline const com::tokera::ate::dao::msg::MessageBase *GetSizePrefixedMessageBase(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<com::tokera::ate::dao::msg::MessageBase>(buf);
}

inline bool VerifyMessageBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<com::tokera::ate::dao::msg::MessageBase>(nullptr);
}

inline bool VerifySizePrefixedMessageBaseBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<com::tokera::ate::dao::msg::MessageBase>(nullptr);
}

inline void FinishMessageBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::tokera::ate::dao::msg::MessageBase> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMessageBaseBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<com::tokera::ate::dao::msg::MessageBase> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace msg
}  // namespace dao
}  // namespace ate
}  // namespace tokera
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_BASE_COM_TOKERA_ATE_DAO_MSG_H_
