// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ENCRYPTTEXT_COM_TOKERA_ATE_DAO_MSG_H_
#define FLATBUFFERS_GENERATED_ENCRYPTTEXT_COM_TOKERA_ATE_DAO_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace tokera {
namespace ate {
namespace dao {
namespace msg {

struct MessageEncryptText;

struct MessageEncryptText FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PUBLICKEYHASH = 4,
    VT_LOOKUPKEY = 6,
    VT_ENCRYPTEDTEXT = 8
  };
  const flatbuffers::String *publicKeyHash() const {
    return GetPointer<const flatbuffers::String *>(VT_PUBLICKEYHASH);
  }
  const flatbuffers::String *lookupKey() const {
    return GetPointer<const flatbuffers::String *>(VT_LOOKUPKEY);
  }
  const flatbuffers::Vector<int8_t> *encryptedText() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_ENCRYPTEDTEXT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PUBLICKEYHASH) &&
           verifier.VerifyString(publicKeyHash()) &&
           VerifyOffset(verifier, VT_LOOKUPKEY) &&
           verifier.VerifyString(lookupKey()) &&
           VerifyOffset(verifier, VT_ENCRYPTEDTEXT) &&
           verifier.VerifyVector(encryptedText()) &&
           verifier.EndTable();
  }
};

struct MessageEncryptTextBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_publicKeyHash(flatbuffers::Offset<flatbuffers::String> publicKeyHash) {
    fbb_.AddOffset(MessageEncryptText::VT_PUBLICKEYHASH, publicKeyHash);
  }
  void add_lookupKey(flatbuffers::Offset<flatbuffers::String> lookupKey) {
    fbb_.AddOffset(MessageEncryptText::VT_LOOKUPKEY, lookupKey);
  }
  void add_encryptedText(flatbuffers::Offset<flatbuffers::Vector<int8_t>> encryptedText) {
    fbb_.AddOffset(MessageEncryptText::VT_ENCRYPTEDTEXT, encryptedText);
  }
  explicit MessageEncryptTextBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessageEncryptTextBuilder &operator=(const MessageEncryptTextBuilder &);
  flatbuffers::Offset<MessageEncryptText> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessageEncryptText>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessageEncryptText> CreateMessageEncryptText(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> publicKeyHash = 0,
    flatbuffers::Offset<flatbuffers::String> lookupKey = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> encryptedText = 0) {
  MessageEncryptTextBuilder builder_(_fbb);
  builder_.add_encryptedText(encryptedText);
  builder_.add_lookupKey(lookupKey);
  builder_.add_publicKeyHash(publicKeyHash);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessageEncryptText> CreateMessageEncryptTextDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *publicKeyHash = nullptr,
    const char *lookupKey = nullptr,
    const std::vector<int8_t> *encryptedText = nullptr) {
  return com::tokera::ate::dao::msg::CreateMessageEncryptText(
      _fbb,
      publicKeyHash ? _fbb.CreateString(publicKeyHash) : 0,
      lookupKey ? _fbb.CreateString(lookupKey) : 0,
      encryptedText ? _fbb.CreateVector<int8_t>(*encryptedText) : 0);
}

}  // namespace msg
}  // namespace dao
}  // namespace ate
}  // namespace tokera
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_ENCRYPTTEXT_COM_TOKERA_ATE_DAO_MSG_H_
