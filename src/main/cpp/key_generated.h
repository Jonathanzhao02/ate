// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_KEY_COM_TOKERA_ATE_DAO_MSG_H_
#define FLATBUFFERS_GENERATED_KEY_COM_TOKERA_ATE_DAO_MSG_H_

#include "flatbuffers/flatbuffers.h"

namespace com {
namespace tokera {
namespace ate {
namespace dao {
namespace msg {

struct MessagePublicKey;

struct MessagePrivateKey;

struct MessagePublicKey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PUBLICKEYHASH = 4,
    VT_PUBLICKEY1 = 6,
    VT_PUBLICKEY2 = 8,
    VT_ALIAS = 10
  };
  const flatbuffers::String *publicKeyHash() const {
    return GetPointer<const flatbuffers::String *>(VT_PUBLICKEYHASH);
  }
  const flatbuffers::Vector<int8_t> *publicKey1() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_PUBLICKEY1);
  }
  const flatbuffers::Vector<int8_t> *publicKey2() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_PUBLICKEY2);
  }
  const flatbuffers::String *alias() const {
    return GetPointer<const flatbuffers::String *>(VT_ALIAS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PUBLICKEYHASH) &&
           verifier.VerifyString(publicKeyHash()) &&
           VerifyOffset(verifier, VT_PUBLICKEY1) &&
           verifier.VerifyVector(publicKey1()) &&
           VerifyOffset(verifier, VT_PUBLICKEY2) &&
           verifier.VerifyVector(publicKey2()) &&
           VerifyOffset(verifier, VT_ALIAS) &&
           verifier.VerifyString(alias()) &&
           verifier.EndTable();
  }
};

struct MessagePublicKeyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_publicKeyHash(flatbuffers::Offset<flatbuffers::String> publicKeyHash) {
    fbb_.AddOffset(MessagePublicKey::VT_PUBLICKEYHASH, publicKeyHash);
  }
  void add_publicKey1(flatbuffers::Offset<flatbuffers::Vector<int8_t>> publicKey1) {
    fbb_.AddOffset(MessagePublicKey::VT_PUBLICKEY1, publicKey1);
  }
  void add_publicKey2(flatbuffers::Offset<flatbuffers::Vector<int8_t>> publicKey2) {
    fbb_.AddOffset(MessagePublicKey::VT_PUBLICKEY2, publicKey2);
  }
  void add_alias(flatbuffers::Offset<flatbuffers::String> alias) {
    fbb_.AddOffset(MessagePublicKey::VT_ALIAS, alias);
  }
  explicit MessagePublicKeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessagePublicKeyBuilder &operator=(const MessagePublicKeyBuilder &);
  flatbuffers::Offset<MessagePublicKey> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessagePublicKey>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessagePublicKey> CreateMessagePublicKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> publicKeyHash = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> publicKey1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> publicKey2 = 0,
    flatbuffers::Offset<flatbuffers::String> alias = 0) {
  MessagePublicKeyBuilder builder_(_fbb);
  builder_.add_alias(alias);
  builder_.add_publicKey2(publicKey2);
  builder_.add_publicKey1(publicKey1);
  builder_.add_publicKeyHash(publicKeyHash);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessagePublicKey> CreateMessagePublicKeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *publicKeyHash = nullptr,
    const std::vector<int8_t> *publicKey1 = nullptr,
    const std::vector<int8_t> *publicKey2 = nullptr,
    const char *alias = nullptr) {
  return com::tokera::ate::dao::msg::CreateMessagePublicKey(
      _fbb,
      publicKeyHash ? _fbb.CreateString(publicKeyHash) : 0,
      publicKey1 ? _fbb.CreateVector<int8_t>(*publicKey1) : 0,
      publicKey2 ? _fbb.CreateVector<int8_t>(*publicKey2) : 0,
      alias ? _fbb.CreateString(alias) : 0);
}

struct MessagePrivateKey FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_PRIVATEKEYHASH = 4,
    VT_PRIVATEKEY1 = 6,
    VT_PRIVATEKEY2 = 8,
    VT_PUBLICKEY = 10
  };
  const flatbuffers::String *privateKeyHash() const {
    return GetPointer<const flatbuffers::String *>(VT_PRIVATEKEYHASH);
  }
  const flatbuffers::Vector<int8_t> *privateKey1() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_PRIVATEKEY1);
  }
  const flatbuffers::Vector<int8_t> *privateKey2() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_PRIVATEKEY2);
  }
  const MessagePublicKey *publicKey() const {
    return GetPointer<const MessagePublicKey *>(VT_PUBLICKEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PRIVATEKEYHASH) &&
           verifier.VerifyString(privateKeyHash()) &&
           VerifyOffset(verifier, VT_PRIVATEKEY1) &&
           verifier.VerifyVector(privateKey1()) &&
           VerifyOffset(verifier, VT_PRIVATEKEY2) &&
           verifier.VerifyVector(privateKey2()) &&
           VerifyOffset(verifier, VT_PUBLICKEY) &&
           verifier.VerifyTable(publicKey()) &&
           verifier.EndTable();
  }
};

struct MessagePrivateKeyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_privateKeyHash(flatbuffers::Offset<flatbuffers::String> privateKeyHash) {
    fbb_.AddOffset(MessagePrivateKey::VT_PRIVATEKEYHASH, privateKeyHash);
  }
  void add_privateKey1(flatbuffers::Offset<flatbuffers::Vector<int8_t>> privateKey1) {
    fbb_.AddOffset(MessagePrivateKey::VT_PRIVATEKEY1, privateKey1);
  }
  void add_privateKey2(flatbuffers::Offset<flatbuffers::Vector<int8_t>> privateKey2) {
    fbb_.AddOffset(MessagePrivateKey::VT_PRIVATEKEY2, privateKey2);
  }
  void add_publicKey(flatbuffers::Offset<MessagePublicKey> publicKey) {
    fbb_.AddOffset(MessagePrivateKey::VT_PUBLICKEY, publicKey);
  }
  explicit MessagePrivateKeyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MessagePrivateKeyBuilder &operator=(const MessagePrivateKeyBuilder &);
  flatbuffers::Offset<MessagePrivateKey> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MessagePrivateKey>(end);
    return o;
  }
};

inline flatbuffers::Offset<MessagePrivateKey> CreateMessagePrivateKey(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> privateKeyHash = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> privateKey1 = 0,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> privateKey2 = 0,
    flatbuffers::Offset<MessagePublicKey> publicKey = 0) {
  MessagePrivateKeyBuilder builder_(_fbb);
  builder_.add_publicKey(publicKey);
  builder_.add_privateKey2(privateKey2);
  builder_.add_privateKey1(privateKey1);
  builder_.add_privateKeyHash(privateKeyHash);
  return builder_.Finish();
}

inline flatbuffers::Offset<MessagePrivateKey> CreateMessagePrivateKeyDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *privateKeyHash = nullptr,
    const std::vector<int8_t> *privateKey1 = nullptr,
    const std::vector<int8_t> *privateKey2 = nullptr,
    flatbuffers::Offset<MessagePublicKey> publicKey = 0) {
  return com::tokera::ate::dao::msg::CreateMessagePrivateKey(
      _fbb,
      privateKeyHash ? _fbb.CreateString(privateKeyHash) : 0,
      privateKey1 ? _fbb.CreateVector<int8_t>(*privateKey1) : 0,
      privateKey2 ? _fbb.CreateVector<int8_t>(*privateKey2) : 0,
      publicKey);
}

}  // namespace msg
}  // namespace dao
}  // namespace ate
}  // namespace tokera
}  // namespace com

#endif  // FLATBUFFERS_GENERATED_KEY_COM_TOKERA_ATE_DAO_MSG_H_
