// automatically generated by the FlatBuffers compiler, do not modify

package com.tokera.ate.dao.msg;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings({"unused", "return.type.incompatible"})
public final class MessagePrivateKey extends Table {
  public static MessagePrivateKey getRootAsMessagePrivateKey(ByteBuffer _bb) { return getRootAsMessagePrivateKey(_bb, new MessagePrivateKey()); }
  public static MessagePrivateKey getRootAsMessagePrivateKey(ByteBuffer _bb, MessagePrivateKey obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public MessagePrivateKey __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public @org.checkerframework.checker.nullness.qual.Nullable String hash() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public @org.checkerframework.checker.nullness.qual.Nullable ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public @org.checkerframework.checker.nullness.qual.Nullable ByteBuffer hashInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public MessageKeyPart parts(int j) { return parts(new MessageKeyPart(), j); }
  public MessageKeyPart parts(MessageKeyPart obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int partsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public MessagePublicKey publicKey() { return publicKey(new MessagePublicKey()); }
  public MessagePublicKey publicKey(MessagePublicKey obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createMessagePrivateKey(FlatBufferBuilder builder,
      int hashOffset,
      int partsOffset,
      int publicKeyOffset) {
    builder.startObject(3);
    MessagePrivateKey.addPublicKey(builder, publicKeyOffset);
    MessagePrivateKey.addParts(builder, partsOffset);
    MessagePrivateKey.addHash(builder, hashOffset);
    return MessagePrivateKey.endMessagePrivateKey(builder);
  }

  public static void startMessagePrivateKey(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(0, hashOffset, 0); }
  public static void addParts(FlatBufferBuilder builder, int partsOffset) { builder.addOffset(1, partsOffset, 0); }
  public static int createPartsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPartsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addPublicKey(FlatBufferBuilder builder, int publicKeyOffset) { builder.addOffset(2, publicKeyOffset, 0); }
  public static int endMessagePrivateKey(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

